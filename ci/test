#!/bin/bash -ex

# shellcheck disable=SC1091

# TODO: Currently, the API Cucumber tests have a hard dependency to run on the
# Conjur container as they perform a number of setup tasks that require code level
# access. This setup should be done with policy files. Until we refactor, we'll
# need to use the existing `./test.sh` file to run API tests.

# Display CLI usage information
function print_help {
  cat << EOF
NAME
    test - CLI to simplify testing

SYNOPSIS
    test [global options]

GLOBAL OPTIONS

    --cucumber-authenticators                 - Runs Cucumber Authenticator features

    --cucumber-policy                         - Runs Cucumber Policy features

    -h | --help                               - Show this message

    --rspec                                   - Runs RSpec specs

EOF
exit
}

# Cleanup started containers
function finish {
  docker-compose down --rmi 'local' --volumes
}
trap finish EXIT

# Setup and run Cucumber tests.
# args: profile name
# example: run_cucumber_tests 'policy'
function run_cucumber_tests() {
  profile="$1"

  # Generate a data key
  export CONJUR_DATA_KEY="$(openssl rand -base64 32)"

  # Create reports folders
  mkdir -p cucumber/$profile/features/reports
  rm -rf cucumber/$profile/features/reports/*

  # Start Conjur and supporting services
  docker-compose up --no-deps -d $services
  docker-compose exec -T conjur conjurctl wait
  docker-compose exec -T conjur conjurctl account create cucumber

  # Grab the admin user API key
  api_key=$(docker-compose exec -T conjur conjurctl \
    role retrieve-key cucumber:user:admin | tr -d '\r')

  # Run the tests
  docker-compose run --no-deps -T --rm -e CONJUR_AUTHN_API_KEY=$api_key cucumber -c \
    "bundle exec cucumber -p $profile --format junit --out cucumber/policy/features/reports"
}

# Setup to allow compose to run in an isolated namespace
export COMPOSE_PROJECT_NAME="$(openssl rand -hex 3)"

services="pg conjur"
RUN_ALL=true
RUN_AUTHENTICATORS=false
# RUN_API=false # TODO: Enable when API tests have been refactored
RUN_POLICY=false
RUN_RSPEC=false
while true ; do
  case "$1" in
    --cucumber-authenticators ) RUN_ALL=false ; RUN_AUTHENTICATORS=true ; shift ;;
    # --cucumber-api ) RUN_ALL=false ; RUN_API=true ; shift ;; # TODO: Enable when API tests have been refactored
    --cucumber-policy ) RUN_ALL=false ; RUN_POLICY=true ; shift ;;
    --rspec ) RUN_ALL=false ; RUN_RSPEC=true ; shift ;;
    -h | --help ) print_help ; shift ;;
     * ) if [ -z "$1" ]; then break; else echo "$1 is not a valid option"; exit 1; fi;;
  esac
done

# Set release tag for building this version of Conjur
cd ..
# Create Conjur Image
./build.sh -j
# Grab the build tag so we launch the correct version of Conjur
. version_utils.sh
export TAG="$(version_tag)"
cd ci

# Run tests based on what flags were passed
if [[ $RUN_AUTHENTICATORS = true || $RUN_ALL = true ]]; then
  services="$services ldap-server"
  run_cucumber_tests 'authenticators'
fi

# TODO: Enable when API tests have been refactored
# if [[ $RUN_API = true || $RUN_ALL = true ]]; then
#   run_cucumber_tests 'api'
# fi

if [[ $RUN_POLICY = true || $RUN_ALL = true ]]; then
  run_cucumber_tests 'policy'
fi

if [[ $RUN_RSPEC = true || $RUN_ALL = true ]]; then
  mkdir -p spec/reports
  rm -rf spec/reports/*
  docker-compose up --no-deps -d pg

  until docker-compose run -T --rm pg psql -U postgres -h pg -c "select 1" -d postgres; do sleep 1; done

  docker-compose run -T --rm --no-deps cucumber -c '
    bundle exec rake db:migrate
    bundle exec rspec
  '
fi
