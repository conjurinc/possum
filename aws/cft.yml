AWSTemplateFormatVersion: "2010-09-09"
Description: Conjur CE Stack, backed by a PostgreSQL database on RDS

Parameters:
  ConjurAccount:
    Type: String
    Description: Name of Conjur account

  ConjurAdminPassword:
    Type: String
    NoEcho: true
    Description: Password for Conjur admin account

  DBAdminUser:
    Type: String
    Description: RDS instance admin user
    Default: conjuradmin

  DBAdminPassword:
    Type: String
    NoEcho: true
    Description: RDS instance admin password

  ImageId:
    Type: AWS::EC2::Image::Id
    Description: Conjur CE AMI

  InstanceType:
    Type: String
    Description: Type of Conjur CE EC2 instance
    Default: t2.medium

  KeyName:
    Type: AWS::EC2::KeyPair::KeyName
    Description: AWS keypair to use

  VpcId:
    Type: AWS::EC2::VPC::Id 
    Description: VPC in which to launch Conjur instances

  VpcSubnetIds:
    Type: "List<AWS::EC2::Subnet::Id>"
    Description: Subnets in which to launch Conjur and Postgres. Specify two, in different Availability Zones.


Metadata:
  AWS::CloudFormation::Interface: 
    ParameterGroups: 
      - Label: 
          default: "Conjur Configuration"
        Parameters:
          - ConjurAccount
          - ConjurAdminPassword
          - DBAdminUser
          - DBAdminPassword
      - Label: 
          default: "EC2 Instance Configuration"
        Parameters:
          - ImageId
          - KeyName
          - VpcId
          - VpcSubnetIds

Resources:
  ConjurSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: "Security group for Conjur server"
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp  # SSH
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp  # Conjur
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0

  PostgresSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref VpcId
      GroupDescription: "Enable access from Conjur"
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 5432
          ToPort: 5432
          SourceSecurityGroupId: !Ref ConjurSecurityGroup

  ConjurInstance:
    Type: "AWS::EC2::Instance"
    Properties: 
      ImageId: !Ref ImageId
      InstanceType: !Ref InstanceType
      KeyName: !Ref KeyName
      SecurityGroupIds: [!Ref ConjurSecurityGroup]
      SubnetId: !Select [0, !Ref VpcSubnetIds]
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -e

          exec >>/var/log/conjur-init.log 2>&1

          set -x
          # Only initialize once
          if grep -q CONJUR_DATA_KEY /etc/default/conjur; then 
            exit 0;
          fi

          cat - >>/etc/default/conjur <<EOF
          CONJUR_ACCOUNT=${ConjurAccount}
          CONJUR_DATA_KEY=$(docker run --rm conjur data-key generate)
          DATABASE_URL=postgres://${DBAdminUser}:${DBAdminPassword}@${RDSInstance.Endpoint.Address}/postgres
          RAILS_ENV=production
          EOF

          admin_api_key="$(/opt/conjur/bin/server create | awk '/API key for admin/ {print $NF}')"
          /opt/conjur/bin/server wait_for_server

          /opt/conjur/bin/set_admin_password "$admin_api_key" "${ConjurAdminPassword}"


  RDSInstance:
    Type: "AWS::RDS::DBInstance"
    Properties:
      Engine: postgres
      EngineVersion: 9.3.17
      AllocatedStorage: 5
      DBInstanceClass: db.t2.medium
      MasterUsername: !Ref DBAdminUser
      MasterUserPassword: !Ref DBAdminPassword
      DBSubnetGroupName: !Ref DBSubnetGroup
      VPCSecurityGroups:
        - !Ref PostgresSecurityGroup

  DBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: "Postgres subnet"
      SubnetIds: !Ref VpcSubnetIds

Outputs:
  ConjurAddress: 
    Description: public IP address of Conjur CE instance
    Value: !GetAtt ConjurInstance.PublicIp
