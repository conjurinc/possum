#!/bin/bash -e

function print_help() {
  cat << EOF
NAME
    cli - Development tool to simplify working with a Conjur container.

SYNOPSIS
    cli [global options] command [command options] [arguments...]
GLOBAL OPTIONS
    --help                                    - Show this message
COMMANDS
    exec                                      - Steps into the running Conjur container, into a bash shell.

    key                                       - Displays the admin user API key

    policy load <account> <policy/path.yml>   - Loads a conjur policy into the provided account.
EOF
exit
}

function print_exec_help() {
  cat << EOF
NAME
    exec - Steps into the running Conjur container, into a bash shell.

SYNOPSIS
    exec [global options] command [command options] [arguments...]
GLOBAL OPTIONS
    --help                                    - Show this message
COMMANDS
    --authn-oidc    Enables OIDC features
    --authn-azure   Enables Azure features
EOF
exit
}

function enable_oidc() {
  echo "Extracting keycloak variables & setting as env variables"

  local keycloak_env_args=''
  keycloak_env_args="$(set -o pipefail; docker-compose exec -T oidc-keycloak printenv | grep KEYCLOAK | sed 's/.*/-e &/')"
  keycloak_env_args="$keycloak_env_args -e PROVIDER_URI=https://keycloak:8443/auth/realms/master"
  keycloak_env_args="$keycloak_env_args -e PROVIDER_INTERNAL_URI=http://keycloak:8080/auth/realms/master/protocol/openid-connect"
  keycloak_env_args="$keycloak_env_args -e ID_TOKEN_USER_PROPERTY=preferred_username"

  env_args="$env_args $keycloak_env_args"
}

function enable_azure() {

  ../ci/authn-azure/check_dependencies.sh

  echo "Setting Azure details as env variables"

  local azure_env_args=''
  azure_env_args="$azure_env_args -e AZURE_TENANT_ID=$AZURE_TENANT_ID"
  azure_env_args="$azure_env_args -e AZURE_AUTHN_INSTANCE_IP=$AZURE_AUTHN_INSTANCE_IP"
  azure_env_args="$azure_env_args -e AZURE_AUTHN_INSTANCE_USERNAME=$AZURE_AUTHN_INSTANCE_USERNAME"
  azure_env_args="$azure_env_args -e AZURE_AUTHN_INSTANCE_PASSWORD=$AZURE_AUTHN_INSTANCE_PASSWORD"
  azure_env_args="$azure_env_args -e AZURE_SUBSCRIPTION_ID=$AZURE_SUBSCRIPTION_ID"
  azure_env_args="$azure_env_args -e AZURE_RESOURCE_GROUP=$AZURE_RESOURCE_GROUP"
  azure_env_args="$azure_env_args -e USER_ASSIGNED_IDENTITY=$USER_ASSIGNED_IDENTITY"
  azure_env_args="$azure_env_args -e USER_ASSIGNED_IDENTITY_CLIENT_ID=$USER_ASSIGNED_IDENTITY_CLIENT_ID"

 # TODO: add this once available
#  azure_env_args="$azure_env_args -e SYSTEM_ASSIGNED_IDENTITY=$SYSTEM_ASSIGNED_IDENTITY"

  env_args="$env_args $azure_env_args"
}

unset COMPOSE_PROJECT_NAME

while true ; do
  case "$1" in
    -h | --help ) print_help ; shift ;;
    exec )
      api_key=$(docker-compose exec -T conjur conjurctl role retrieve-key cucumber:user:admin | tr -d '\r')
      env_args="-e CONJUR_AUTHN_API_KEY=$api_key"

      case "$2" in
        -h | --help ) print_exec_help ; shift ;;
        --authn-oidc ) enable_oidc ; shift ;;
        --authn-azure ) enable_azure ; shift ;;
        * ) if [ -z "$2" ]; then shift ; else echo "$2 is not a valid option"; exit 1; fi;;
      esac

      docker exec $env_args -it --detach-keys 'ctrl-\' $(docker-compose ps -q conjur) bash
     shift ;;
    policy )
      case "$2" in
        load )
          account="$3"
          policy_file=$4
          docker-compose exec conjur conjurctl policy load "$account" "/src/conjur-server/$policy_file"
          shift 4 ;;
        * ) if [ -z "$1" ]; then break; else echo "$1 is not a valid option"; exit 1; fi;;
      esac ;;
    key ) docker-compose exec -T conjur conjurctl role retrieve-key cucumber:user:admin ; shift ;;
     * ) if [ -z "$1" ]; then break; else echo "$1 is not a valid option"; exit 1; fi;;
  esac
done
