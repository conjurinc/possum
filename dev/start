#!/usr/bin/env bash
#
# NOTE: You must execute this script from this directory (dev).
set -ex
set -o pipefail

# CC servers can't find it for some reason.  Local shellcheck is fine.
# shellcheck disable=SC1091
source "../ci/oauth/keycloak/keycloak_functions.sh"

# SCRIPT GLOBAL STATE

# Set up VERSION file for local development
if [ ! -f "../VERSION" ]; then
  echo -n "0.0.dev" > ../VERSION
fi

# Minimal set of services.  We add to this list based on cmd line flags.
services=(pg conjur client)

# Authenticators to enable.
default_authenticators="authn,authn-k8s/test"
enabled_authenticators="$default_authenticators"

# Environment args to set in the container we get dropped into.
env_args=()

# Services and authenticators to start, enabled by cmd line flags.
ENABLE_AUTHN_LDAP=false
ENABLE_AUTHN_IAM=false
ENABLE_AUTHN_AZURE=false
ENABLE_AUTHN_OIDC=false
ENABLE_AUTHN_GCP=false
ENABLE_AUTHN_JWT=false
ENABLE_OIDC_ADFS=false
ENABLE_OIDC_OKTA=false
ENABLE_ROTATORS=false
ENABLE_AUDIT=false

main() {
  unset COMPOSE_PROJECT_NAME
  parse_options "$@"

  if ! docker info >/dev/null 2>&1; then
    echo "Docker does not seem to be running, run it first and retry"
    exit 1
  fi

  # Build docker images.
  docker-compose build --pull

  init_data_key
  init_audit_service

  # Install gems, create DB, and create cucumber account.
  docker-compose up -d --no-deps "${services[@]}"
  docker-compose exec conjur bundle
  docker-compose exec conjur conjurctl db migrate
  docker-compose exec conjur conjurctl account create cucumber || true

  migrate_audit_db

  start_conjur_server

  init_ldap
  init_azure
  init_gcp
  init_jwt
  init_oidc
  init_rotators

  # Updates CONJUR_AUTHENTICATORS and restarts required services.
  start_auth_services
  create_alice
  #kill_conjur # so dev's can restart it manually
  enter_container
}

print_help() {
  cat << EOF
Starts Conjur for development. Once setup is complete, the user is dropped into
the Conjur container.  To start the application server, run:
    # conjurctl server

Usage: start [options]
    --authn-ldap    Starts OpenLDAP server and loads a demo policy to enable
                    authentication via:
                    'curl -X POST -d "alice" http://localhost:3000/authn-ldap/test/cucumber/alice/authenticate'
    --rotators      Starts a cucumber and test postgres container.
                    Drops you into the cucumber container.
                    You then manually start 'conjurctl server' in another tab.

    --authn-iam     Starts with authn-iam/prod as authenticator

    --authn-azure   Starts with authn-azure/prod as authenticator

    --authn-oidc    Starts with authn-oidc/keycloak as authenticator

    --authn-gcp     Starts with authn-gcp as authenticator

    --authn-jwt     Starts with authn-jwt as authenticator

    --oidc-adfs     Adds to authn-oidc adfs static env configuration

    --oidc-okta     Adds to authn-oidc okta static env configuration

    --audit         Starts with the audit engine and database enabled

    -h, --help      Shows this help message.
EOF
  exit
}

parse_options() {
  while true ; do
    case "$1" in
      --authn-iam ) ENABLE_AUTHN_IAM=true ; shift ;;
      --authn-azure ) ENABLE_AUTHN_AZURE=true ; shift ;;
      --authn-ldap ) ENABLE_AUTHN_LDAP=true ; shift ;;
      --authn-gcp ) ENABLE_AUTHN_GCP=true ; shift ;;
      --authn-jwt ) ENABLE_AUTHN_JWT=true ; shift ;;
      --authn-oidc ) ENABLE_AUTHN_OIDC=true ; shift ;;
      --oidc-adfs ) ENABLE_OIDC_ADFS=true ; shift ;;
      --oidc-okta ) ENABLE_OIDC_OKTA=true ; shift ;;
      --rotators ) ENABLE_ROTATORS=true ; shift ;;
      --audit ) ENABLE_AUDIT=true ; shift ;;
      -h | --help ) print_help ; shift ;;
       * )
         if [ -z "$1" ]; then
           break
         else
           echo "$1 is not a valid option"
           exit 1
         fi ;;
    esac
  done
}

client_load_policy() {
  local policy_file=$1

  docker-compose exec client \
    conjur policy load root "$policy_file"
}

client_add_secret() {
  local variable=$1
  local value=$2

  docker-compose exec client \
    conjur variable values add "$variable" "$value"
}

configure_oidc_providers() {
  # Start conjur again, since it is recreating by docker-compose because of
  # dependency with keycloak
  start_conjur_server
  wait_for_keycloak_server
  fetch_oidc_certificates
  configure_oidc_authenticators
  enable_oidc_authenticators
  create_keycloak_users
  echo "keycloak admin console url: http://0.0.0.0:7777/auth/admin"
}

start_conjur_server() {
  echo "Starting Conjur server"
  docker-compose exec -d conjur conjurctl server

  echo 'Checking if Conjur server is ready'
  wait_for_conjur
}

wait_for_conjur() {
  api_key=$(
    docker-compose exec -T conjur \
      conjurctl role retrieve-key cucumber:user:admin | tr -d '\r'
  )

  docker-compose exec -T conjur conjurctl wait

  docker-compose exec client conjur authn login -u admin -p "$api_key"
}

configure_oidc_authenticators() {
  # add variables' values for keycloak
  echo "Setting keycloak variables values in conjur"
  client_load_policy \
    "/src/conjur-server/ci/test_suites/authenticators_oidc/policy.yml"

  client_add_secret \
    "conjur/authn-oidc/keycloak/provider-uri" \
    "https://keycloak:8443/auth/realms/master"

  client_add_secret \
    "conjur/authn-oidc/keycloak/id-token-user-property" "preferred_username"

  # Specific for Keycloak Authenticator (for full flow)
    client_load_policy '/src/conjur-server/dev/policies/authenticators/authn-oidc/keycloak2.yml'
    client_add_secret 'conjur/authn-oidc/keycloak2/provider-uri' 'https://keycloak:8443/auth/realms/master'
    client_add_secret 'conjur/authn-oidc/keycloak2/client-id' 'conjurClient'
    client_add_secret 'conjur/authn-oidc/keycloak2/client-secret' '1234'
    client_add_secret 'conjur/authn-oidc/keycloak2/claim-mapping' 'email'
    client_add_secret 'conjur/authn-oidc/keycloak2/nonce' 'af88d8f8ff6631fb4cf0'
    client_add_secret 'conjur/authn-oidc/keycloak2/state' 'd38e57e0fd47ccffa9c2'
    client_add_secret 'conjur/authn-oidc/keycloak2/redirect_uri' 'http://localhost:3000/authn-oidc/keycloak2/cucumber/authenticate'

    client_load_policy '/src/conjur-server/dev/policies/authenticators/authn-oidc/keycloak2-users.yml'



  if [[ $ENABLE_OIDC_OKTA = true ]]; then
    # Specific for new OIDC Authenticator
    client_load_policy '/src/conjur-server/dev/policies/authenticators/authn-oidc/okta-2.yml'
    client_add_secret 'conjur/authn-oidc/okta-2/provider-uri' 'https://dev-92899796.okta.com/oauth2/default'
    client_add_secret 'conjur/authn-oidc/okta-2/client-id' '0oa3w3xig6rHiu9yT5d7'
    client_add_secret 'conjur/authn-oidc/okta-2/client-secret' 'e349BMTTIpLO-rPuPqLLkLyH_pO-loUzhIVJCrHj'
    client_add_secret 'conjur/authn-oidc/okta-2/claim-mapping' 'preferred_username'
    client_add_secret 'conjur/authn-oidc/okta-2/nonce' '1656b4264b60af659fce'
    client_add_secret 'conjur/authn-oidc/okta-2/state' '4f413476ef7e2395f0af'
    client_add_secret 'conjur/authn-oidc/okta-2/redirect_uri' 'http://localhost:3000/authn-oidc/okta-2/cucumber/authenticate'

    client_load_policy '/src/conjur-server/dev/policies/authenticators/authn-oidc/okta-users.yml'
  fi

  if [[ $ENABLE_OIDC_ADFS = true ]]; then
    # add variables' values for ADFS
    client_load_policy "/src/conjur-server/ci/authn-oidc/policy_adfs.yml"

    client_add_secret \
      "conjur/authn-oidc/adfs/provider-uri" \
      "https://adfs4win2016.northeurope.cloudapp.azure.com"

    client_add_secret \
      "conjur/authn-oidc/adfs/id-token-user-property" "unique_name"
  fi
}

fetch_oidc_certificates() {
  fetch_keycloak_certificate

  if [[ $ENABLE_OIDC_ADFS = true ]]; then
    echo "Initialize ADFS certificate in conjur server"
    docker-compose exec conjur \
      /src/conjur-server/dev/files/authn-oidc/adfs/fetchCertificate
  fi
}

enable_oidc_authenticators() {
  echo "Configuring Keycloak as OpenID provider for automatic testing"
  # We enable an OIDC authenticator without a service-id to test that it's
  # invalid.
  enabled_authenticators="$enabled_authenticators,authn-oidc/keycloak,authn-oidc,authn-oidc/keycloak2"

  if [[ $ENABLE_OIDC_OKTA = true ]]; then
    echo "Configuring OKTA as OpenID provider for manual testing"
    enabled_authenticators="$enabled_authenticators,authn-oidc/okta,authn-oidc/okta-2"
  fi

  if [[ $ENABLE_OIDC_ADFS = true ]]; then
    echo "Configuring ADFS as OpenID provider for manual testing"
    enabled_authenticators="$enabled_authenticators,authn-oidc/adfs"
  fi
}

init_data_key() {
  if [ ! -f data_key ]; then
    echo "Generating data key"
    openssl rand -base64 32 > data_key
  fi

  export CONJUR_DATA_KEY
  CONJUR_DATA_KEY="$(cat data_key)"
}

init_audit_service() {
  if [[ $ENABLE_AUDIT == true ]]; then
    services+=(audit)
    export AUDIT_DATABASE_URL=postgres://postgres@audit
  fi
}

migrate_audit_db() {
  if [[ $ENABLE_AUDIT != true ]]; then
    return
  fi

  # Run database migration to create audit database schema.
  #
  # SC2016: We want docker-compose to expand $AUDIT_DATABASE_URL.
  # SC1004: Literal backslash will be interpreted away by bash.
  # shellcheck disable=SC2016,SC1004
  docker-compose exec -T conjur bash -c '
  BUNDLE_GEMFILE=/src/conjur-server/Gemfile \
    bundle exec sequel $AUDIT_DATABASE_URL \
    -E -m /src/conjur-server/engines/conjur_audit/db/migrate/
  '
}

init_ldap() {
  if [[ $ENABLE_AUTHN_LDAP != true ]]; then
    return
  fi

  services+=(ldap-server)
  env_args+=(-e "LDAP_URI=ldap://ldap-server:389")
  env_args+=(-e "LDAP_BASE=dc=conjur,dc=net")
  env_args+=(-e "LDAP_FILTER=(uid=%s)")
  env_args+=(-e "LDAP_BINDDN=cn=admin,dc=conjur,dc=net")
  env_args+=(-e "LDAP_BINDPW=ldapsecret")

  enabled_authenticators="$enabled_authenticators,authn-ldap/test,authn-ldap/secure"

  # Using conjur policy load doesn't work here (not sure why).
  docker-compose exec conjur \
    conjurctl policy load cucumber \
    "/src/conjur-server/dev/files/authn-ldap/policy.yml"
}

init_azure() {
  if [[ $ENABLE_AUTHN_AZURE != true ]]; then
    return
  fi

  enabled_authenticators="$enabled_authenticators,authn-azure/prod"

  ../ci/authn-azure/check_dependencies.sh

  client_load_policy \
    "/src/conjur-server/ci/test_suites/authenticators_azure/policies/policy.yml"

  docker-compose exec client \
    conjur variable values add \
    conjur/authn-azure/prod/provider-uri "https://sts.windows.net/$AZURE_TENANT_ID/"

  # Create host policy from template.
  sed "s#{{ AZURE_SUBSCRIPTION_ID }}#$AZURE_SUBSCRIPTION_ID#g" \
    "../ci/authn-azure/policies/azure-hosts.template.yml" |
    sed "s#{{ AZURE_RESOURCE_GROUP }}#$AZURE_RESOURCE_GROUP#g" > \
    "../ci/authn-azure/policies/azure-hosts.yml"

  client_load_policy \
    "/src/conjur-server/ci/authn-azure/policies/azure-hosts.yml"

  client_load_policy \
    "/src/conjur-server/ci/authn-azure/policies/azure-operators.yml"
}

init_gcp() {
  if [[ $ENABLE_AUTHN_GCP = true ]]; then
    enabled_authenticators="$enabled_authenticators,authn-gcp"
  fi
}

init_jwt() {
  if [[ $ENABLE_AUTHN_JWT != true ]]; then
    return
  fi

  enabled_authenticators="$enabled_authenticators,authn-jwt/raw,authn-jwt/keycloak"
  services+=(jwks jwks_py keycloak)
  docker-compose up -d --no-deps "${services[@]}"

  # OIDC is a special case on JWT, JWT automation tests contain scenarios with
  # OIDC providers.
  configure_oidc_providers

  echo "Configure jwks provider"
  docker-compose exec jwks "/tmp/create_nginx_certificate.sh"
}

init_oidc() {
  # ADFS and OKTA make no sense without OIDC.
  if [[ $ENABLE_AUTHN_OIDC = false &&
    ($ENABLE_OIDC_ADFS = true || $ENABLE_OIDC_OKTA = true) ]]
  then
    echo "Error: --oidc-adfs and --oidc-okta both require --authn-oidc"
    exit 1
  fi

  if [[ $ENABLE_AUTHN_OIDC != true ]]; then
    return
  fi

  services+=(keycloak)
  docker-compose up -d --no-deps "${services[@]}"
  echo "++++++++++ configure_oidc_providers ++++++++"
  configure_oidc_providers

  if [[ $ENABLE_AUTHN_LDAP = true && $ENABLE_OIDC_OKTA = true ]]; then
    echo "Building & configuring Okta-LDAP agent"
    services+=(okta-ldap-agent)
    docker-compose up -d --no-deps "${services[@]}"

    echo "Starting Okta agent service"
    docker exec "$(docker-compose ps -q okta-ldap-agent)" \
      "/opt/Okta/OktaLDAPAgent/scripts/OktaLDAPAgent"
  fi
}

init_rotators() {
  if [[ $ENABLE_ROTATORS != true ]]; then
    return
  fi

  services+=(testdb cucumber)
}

init_iam() {
  if [[ $ENABLE_AUTHN_IAM != true ]]; then
    return
  fi
  enabled_authenticators="$enabled_authenticators,authn-iam/prod"

  # Using conjur policy load doesn't work here (not sure why).
  docker-compose exec conjur \
    conjurctl policy load cucumber \
    "/src/conjur-server/dev/files/authn-iam/policy.yml"
}

start_auth_services() {
  echo "Setting CONJUR_AUTHENTICATORS to: $enabled_authenticators"
  env_args+=(-e "CONJUR_AUTHENTICATORS=$enabled_authenticators")

  # Will restart services if configuration has changed.  I think this happens
  # when additional authenticators are enabled.
  docker-compose up -d --no-deps "${services[@]}"

  # If that happens, we need to restart Conjur server.
  if [[ "$enabled_authenticators" != "$default_authenticators" ]]; then
    start_conjur_server
  fi
}

create_alice() {
  echo "Creating user alice"
  client_load_policy "/src/conjur-server/dev/files/policy.yml"

  echo "+++++++++ list resources webservice"
  docker-compose exec client conjur list -k webservice
  echo "+++++++++ list resources variable"
  docker-compose exec client conjur list -k variable

  echo "+++++++++ authenticate OIDC"
  #docker-compose exec client curl -X POST http://conjur:3000/authn-oidc/keycloak/cucumber/authenticate --header 'Content-Type: application/x-www-form-urlencoded' --header "Accept-Encoding: base64" --data-urlencode 'jwt=abcdefgfhfghgfhgfhf'

#  ID_TOKEN="idToken-1a6633d9-b613-489f-930c-16673e906bf0= \
#  eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6IjFBNkNEMjNBMEVCMjk0MzJGN0QzRjZCMTQ5NjMyNkY0OTM0NDU5RjMiLCJ4NXQ \
#  iOiJHbXpTT2c2eWxETDMwX2F4U1dNbTlKTkVXZk0iLCJhcHBfaWQiOiJfX2lkYXB0aXZlX2N5YnJfdXNlcl9vaWRjIn0.eyJwcmVmZXJyZW \
#  RfdXNlcm5hbWUiOiJhbG9uQGN5YmVyYXJrLmNsb3VkLjI2NTEyIiwiZmFtaWx5X25hbWUiOiJhbG9uIiwidGVuYW50X3N1YmRvbWFpbiI6 \
#  Imh0dHBzOi8vYWxvbmF1ZGl0dGVzdC5pbnRlZ3JhdGlvbi1jeWJlcmFyay5jbG91ZCIsInVuaXF1ZV9uYW1lIjoiYWxvbkBjeWJlcmFyay \
#  5jbG91ZC4yNjUxMiIsImlkYXB0aXZlX3RlbmFudF9pZCI6IkFCUDU2NDgiLCJ0ZW5hbnRfaWQiOiIxYTY2MzNkOS1iNjEzLTQ4OWYtOTMw \
#  Yy0xNjY3M2U5MDZiZjAiLCJ1c2VyX3JvbGVzIjpbIlN5c3RlbSBBZG1pbmlzdHJhdG9yIiwiRXZlcnlib2R5IiwiZ2xvYmFsIGF1ZGl0b3 \
#  IiXSwiaWF0IjoxNjU5MDEwMjY4LCJzdWIiOiJjMmM3YmNjNi05NTYwLTQ0ZTAtOGRmZi01YmUyMjFjZDM3ZWUiLCJhdXRoX3RpbWUiOjE2 \
#  NTkwMDkwNjQsInJ0X3JlZiI6IjEyODFFNjU0RDEzMkY5REQ2QjBEMEQwOTdFQjU0Q0JGNEM0RkJFRUMiLCJleHAiOjE2NTkwMTExNjgsIn \
#  VzZXJfdXVpZCI6ImMyYzdiY2M2LTk1NjAtNDRlMC04ZGZmLTViZTIyMWNkMzdlZSIsInNjb3BlIjoib3BlbmlkIGFwaSBwcm9maWxlIiwi \
#  bGFzdF9sb2dpbiI6IjAiLCJhdWQiOiJfX2lkYXB0aXZlX2N5YnJfdXNlcl9vaWRjIiwiYXdzX3JlZ2lvbiI6InVzLWVhc3QtMSIsInN1Ym \
#  RvbWFpbiI6ImFsb25hdWRpdHRlc3QiLCJjc3JmX3Rva2VuIjoiV3BkZmxxcnZHUXVPeUFPTzBxTTRIVFJaOS1CelcxbEJoTXA1eUNmZzRq \
#  czEiLCJpbnRlcm5hbF9zZXNzaW9uX2lkIjoiNzRiNTRhODktMmU5Yy00ZWY2LWI2OGQtOTcwM2ExYTYyZmE1IiwicGxhdGZvcm1fZG9tYW \
#  luIjoiaW50ZWdyYXRpb24tY3liZXJhcmsuY2xvdWQiLCJpc3MiOiJodHRwczovL2FicDU2NDguaWQuaW50ZWdyYXRpb24tY3liZXJhcmsu \
#  Y2xvdWQvX19pZGFwdGl2ZV9jeWJyX3VzZXJfb2lkYy8iLCJhdF9oYXNoIjoibjBGNmcwaUpLTzBJMlZucTVCUkJpZyIsIm5hbWUiOiJhbG \
#  9uIiwiZ2l2ZW5fbmFtZSI6ImFsb24ifQ.E43AIh8Ch2iwZozILbsSwaB-_fkAyLVCmvvjX6q8z1FEGWS-mBUiQVewXopmyqYo47p3TkYtn \
#  7XX99SWIwYaU-EW51pFgz_IA7Nn8NVSxLjCJuCl8TGfSAa_UwoJemlUOCsRkLSZFxrhZZt7GG7tENkxxPOIOaumka2NiBGpcOEuGxeT7i- \
#  AsYnl2bFSAGCL-cAG6pxnBnsPYFGRvv90o8POh0ASRAgwDh9OmHUV-6nypGnoCu8ACy2aB_nhNwxLOsO6yBufBCYni5OqjQbPHbM-R-t9N \
#  SseC56ViMNS6HDaUjDygSYLrMr3Lxj5m-XVzyS8jAtLRKEmoi9_Qc8OIQ"

  docker-compose exec client curl -X POST http://conjur:3000/authn-oidc/keycloak/cucumber/authenticate --header 'Content-Type: application/x-www-form-urlencoded' --header "Accept-Encoding: base64" --data-urlencode "$ID_TOKEN"



  docker-compose exec client curl -X POST https://ofiratest.integration-cyberark.cloud/authn-oidc/cyberark/conjur/authenticate \
  --header 'Content-Type: application/json' \
  --header 'Cookie: podloc=eyJjbG91ZC5pZGFwdGl2ZS5xYSI6ImFiYzU0NTkuaWQuaW50ZWdyYXRpb24tY3liZXJhcmsuY2xvdWQifQ__;
  loggedIn-353c97c4-a7ec-4e33-9fef-9b02f0e0e39e=true; antixss=NXI1Ym4vdy9Jbi9PSk8zRGg2M3hPNmVsbDhSTGIxWG00b2c4YTREWGdhMD0_-xfx35wlXRWRuY_j41vkAHQ__-HlS2fB9LmGR5_XVbgmyVzw__-MM5BiMeMhpTv6yFLXoSGww__-9Xr12lfHBOR4HIkYMsmZZw__-a_wTcM6nnmvVi_CKjKLDEw__-6n8DVXybEWmKhN4U47Nw3g__-d8vwaeME5aO0aOfsjbu0bQ__-9_a3nItpUtO9XUCXwtrjnw__; idToken-353c97c4-a7ec-4e33-9fef-9b02f0e0e39e=eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6IjVFMzIzRThFQTVDMzVFMDVEMUI0MUEyNjFEOUIzNTRDOEYzNzM4RUQiLCJ4NXQiOiJYakktanFYRFhnWFJ0Qm9tSFpzMVRJODNPTzAiLCJhcHBfaWQiOiJfX2lkYXB0aXZlX2N5YnJfdXNlcl9vaWRjIn0.eyJwcmVmZXJyZWRfdXNlcm5hbWUiOiJhbG9uQGN5YmVyYXJrLmNsb3VkLjc4MjMiLCJmYW1pbHlfbmFtZSI6ImFsb24iLCJ0ZW5hbnRfc3ViZG9tYWluIjoiaHR0cHM6Ly9hbG9udWkuaW50ZWdyYXRpb24tY3liZXJhcmsuY2xvdWQiLCJ1bmlxdWVfbmFtZSI6ImFsb25AY3liZXJhcmsuY2xvdWQuNzgyMyIsImlkYXB0aXZlX3RlbmFudF9pZCI6IkFCQzU0NTkiLCJ0ZW5hbnRfaWQiOiIzNTNjOTdjNC1hN2VjLTRlMzMtOWZlZi05YjAyZjBlMGUzOWUiLCJ1c2VyX3JvbGVzIjpbIlN5c3RlbSBBZG1pbmlzdHJhdG9yIiwiU2VjcmV0cyBNYW5hZ2VyIOKAkyBDb25qdXIgQ2xvdWQgQWRtaW4iLCJFdmVyeWJvZHkiLCJnbG9iYWwgYXVkaXRvciJdLCJpYXQiOjE2NTY1NzQ5NDAsInN1YiI6ImMyYzdiY2M2LTk1NjAtNDRlMC04ZGZmLTViZTIyMWNkMzdlZSIsImF1dGhfdGltZSI6MTY1NjU3NDAwNSwicnRfcmVmIjoiQTNGRTMyRTcxRTY4NDE3Njk4NTE1RjM4MEVDQjA0NTNFRUQ0QTlBMCIsImV4cCI6MTY1NjU3NTg0MCwidXNlcl91dWlkIjoiYzJjN2JjYzYtOTU2MC00NGUwLThkZmYtNWJlMjIxY2QzN2VlIiwic2NvcGUiOiJvcGVuaWQgYXBpIHByb2ZpbGUiLCJsYXN0X2xvZ2luIjoiMTY1NjU3MTUyNSIsImF1ZCI6Il9faWRhcHRpdmVfY3licl91c2VyX29pZGMiLCJhd3NfcmVnaW9uIjoidXMtZWFzdC0xIiwic3ViZG9tYWluIjoiYWxvbnVpIiwiY3NyZl90b2tlbiI6IkExWHZ6cjNVc2J3Q29XanVialZqejFsUW5YTmtoRGxFbGZVOTM3NW45UE0xIiwiaW50ZXJuYWxfc2Vzc2lvbl9pZCI6IjU4ZjEwMDRmLTVlOTMtNDVhMS05YTk0LTU5YjViZjkxM2NmNSIsInBsYXRmb3JtX2RvbWFpbiI6ImludGVncmF0aW9uLWN5YmVyYXJrLmNsb3VkIiwiaXNzIjoiaHR0cHM6Ly9hYmM1NDU5LmlkLmludGVncmF0aW9uLWN5YmVyYXJrLmNsb3VkL19faWRhcHRpdmVfY3licl91c2VyX29pZGMvIiwiYXRfaGFzaCI6InVyb2ZFN2lURlctNm9GN2tpMFU1LXciLCJuYW1lIjoiYWxvbiIsImdpdmVuX25hbWUiOiJhbG9uIn0.YYDANSF051k9rMX_8_Jk9TUT0yy57HHOj4FDZV5gI4NOLi3fbA7XbaQpuBqQfkIve0SZo-QJNuS30NyQYHYHYi6qTzXNiLEkIVLHcSr4RxAK3rc5W3WajQxV_BAKh9J2mOVxZngHcUHMGfeRZ2PUFPzq1nD2nf87sOfS1k5xdAbDSu4Ex8pCFj-5fmWK0zm3RytpFSj0leOqR3gKoB2ufPXdvYU64Egv6ukwcDonjIjhAiC4Bphog8D1n8-iUmMa1JfQuVdI8qOL1r4CuwOxtWWGd8Ufjl-MnvrT2-5fTiXhLDITqPt34SwhcjsTzJTIRk5hdNdynS-9OVVKF0C0cA; XSRF-TOKEN-353c97c4-a7ec-4e33-9fef-9b02f0e0e39e=A1Xvzr3UsbwCoWjubjVjz1lQnXNkhDlElfU9375n9PM1; sessdata=L3dVSFFVSkROVFExT1FKQmxHb0lVWGdRRFlPdlZ2U3JEMjUwdzhZTTVDc2x4Um9UL3V0a21pSExkTThRVk9CNnlqbTJSSEU0QUxPdGY5KytzUmhaMUJKSkZLSkcwRWFFVDRScjFTV2VwWU1vS3dxZUU5TXJwYUVENS9NdEpPMWlMQU5PWDAxRm5WbHN2QVU9' \
  --header 'X-IDAP-NATIVE-CLIENT: true' \
  --data-raw '{"id":"c2c7bcc6-9560-44e0-8dff-5be221cd37ee","Args":{"PageNumber":1,"PageSize":100000,"Limit":100000,"SortBy":"","Caching":-1}}'

}

kill_conjur() {
  echo "killing the conjur server process"
  docker-compose exec conjur /src/conjur-server/dev/files/killConjurServer
}

enter_container() {
  env_args+=(-e "CONJUR_AUTHN_API_KEY=$api_key")
  docker exec "${env_args[@]}" -it --detach-keys ctrl-\\ \
    "$(docker-compose ps -q conjur)" bash
}

main "$@"
