- password length annotation works
- rotation works
- rotation timing works
- updated in both places (conjur and rotated_db)
- fails in one then fails in both
    - rotated_db fails.  how to test this?  disconnect the db?  give it a bad
      user name via policy
    - conjur fails -- how to test this?
- changing ttl dynamically works


I'd say make a new class in lib. You can even make it a sequel database extension (these are trivial to structure, there are plenty included in the base sequel gem, just sort by file size and look into the smallest) and load it in the sequel initializer.
BTW, I think you can do `db.single_value Sequel.function :pg_is_in_recovery` or somesuch
If you make it into an extension you'll be able to say `db.in_recovery?` which is nea


Kevin's Tests:
    https://github.com/conjurinc/secretless/tree/master/test/pg_handler

Use API from tests:
  https://github.com/conjurinc/conjur-ui/blob/master/features/support/test_policies.rb#L55



change nameing so its back compatible:
   rotation/rotator: postgresql/password

also don't forget the follower check, the query kevin gave me.

ADD JIRA task for fixing docs in CLI (Access is misleading):

      root@c4db5f4cb9b1:/src/conjur-server# conjur help variable
      NAME
          variable - Manage variables

      SYNOPSIS
          conjur [global options] variable value [-v arg|--version arg] VARIABLE
          conjur [global options] variable values

      COMMANDS
          value  - Get a value
          values - Access variable values

# Testing
- add test for dynamic ttl change
- add test for dynamic ttl change

# Other stuff
- i just realized that this command `conjur variable expire` will need to be updated, correct?

The two rotators we’re on the hook for as part of the V5 release is: Postgres &
AWS Secret Access Key.  Let’s push the `expires_with` work out to allow us to
complete the key bits to ship this feature:

• Create `ConjurFacadeForRotator`
• Port Postgres rotator to Facade design
• Cukes & unit tests for Facade & PG rotator




All of these would be separate JIRA tasks.  This is a proposed priority order.  All open to debate /change:

- Write SSH keypair rotator (no tests yet, to verify design) 
    - Thoughts: this is a safety measure and kevin suggested it, but we could probably skip this.  i'm fairly confident the facade design will work already. ofc, it needs to be done anyway at, so... This is a decision where you're balancing velocity with risk.  It will probably take 1-2 days fwiw.  I guess closer to one without tests)
- Create `ConjurFacadeForRotators` (without tests)
    - This is a pre-requisite for finishing new framework code
- Update rotator framework code with new facade design (completes CONJ-5051)
- Verify postgres rotator against framework
    - Ie, the rotator I made today.  This would be manual verification only most likely, for now.
- Cukes for rotation (completes CONJ-5052)
    - These would be against the postgres rotator most likely.
- Unit tests for rotation (completes CONJ-5053)
- Cucumber tests for `ConjurFacadeForRotators`
- Unit tests for `ConjurFacadeForRotators`

Once we get here, the base "v5 rotators" should be considered done.  Everything that comes after is either rotator implementation, or performance or feature enhancements.



- Parallel execution (completes 5067)
    - Must solve the db (resource_id, version) conflict issue, either by updating the trigger code somehow, or doing locking.  Discussion with Alan / Kevin /Rafal important on this point.  Rafal in particular seems good with low-level db stuff and might have the best solution, he hasn't been involved yet in this discussion.
- Porting of existing rotators (one task for each)
- Locking and Rollback
    - Kevin's points: first 2 items on Kevin's post here: https://conjurhq.slack.com/archives/CA8AT283D/p1527276364000369
- Cron scheduling, and combo cron/ttl logic
    - Point 3 of Kevin's same post linked above, and also the followup disucssion with Ryan and Kevin.





Where the processes start.  We want a new rake process for our "watcher":
Invoked by conjurctl when the server starts

https://github.com/cyberark/conjur/blob/3a9fa52c844b638e4dc41341c6eb54477fd57f2c/bin/conjur-cli.rb#L74

Notes on PathBased:
https://github.com/cyberark/conjur-api-ruby/blob/v4.31.0/lib/conjur/path_based.rb

Where resourceid is defined:
https://github.com/cyberark/conjur-api-ruby/blob/4.6/lib/conjur/resource.rb#L32

Sample Dummy Rotator:
https://github.com/conjurinc/rotation/blob/master/lib/rotation/rotators/new_value.rb#L12

Using annotations to determine the correct rotator:
Also: how rotation actually gets done:

https://github.com/conjurinc/rotation/blob/master/lib/rotation/service.rb#L106
